(load "2.3.2.scm")

(define (exponentation? e) (and (list? e) (eq? (car e) '**)))
(define (base e) (cadr e))
(define (exponent e) (caddr e))
(define (make-exponentation b e)
    (cond ((=number? b 1) 1)
          ((=number? e 1) b)
          ((=number? b 0) (if (= e 0) (error "0^0 not defined" b e) 0))
          ((=number? e 0) 1)
          ((and (number? b) (number? e)) (expt b e))
          (else (list '** b e))))

(define (deriv exp var)
    (cond ((number? exp) 0)
          ((variable? exp)
           (if (same-variable? exp var) 1 0))
          ((sum? exp)
           (make-sum (deriv (augend exp) var)
                     (deriv (addend exp) var)))
          ((product? exp)
           (make-sum (make-product (deriv (multiplicand exp) var)
                                   (multiplier exp))
                     (make-product (multiplicand exp)
                                   (deriv (multiplier exp) var))))
          ((exponentation? exp)
           (make-product (make-product (exponent exp)
                                       (make-exponentation (base exp) (make-sum (exponent exp) -1)))
                         (deriv (base exp) var)))
          (else
           (error "unknown expression type -- DERIV" exp))))

(deriv '(* (+ x 1) (** x 3)) 'x)

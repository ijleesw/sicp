(define (make-monitored proc)
    (let ((counter 0))
        (define (dispatch m)
            (cond ((eq? m 'how-many-calls?) counter)
                  ((eq? m 'reset-count) (set! counter 0))
                  (else (set! counter (+ counter 1)) (proc m))))
        dispatch))

(define (make-monitored proc)
    (let ((counter 0))
        (lambda (m)
            (cond ((eq? m 'how-many-calls?) counter)
                  ((eq? m 'reset-count) (set! counter 0))
                  (else (set! counter (+ counter 1)) (proc m))))))

(define s (make-monitored sqrt))

(s 'how-many-calls?)
(s 100)
(s 'how-many-calls?)
(s 10000)
(s 'how-many-calls?)
(s 'reset-count)
(s 'how-many-calls?)

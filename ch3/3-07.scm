(define (make-account balance passwd)
    (define (withdraw amount)
        (if (>= balance amount)
            (begin (set! balance (- balance amount)) balance)
            "Insufficient funds"))
    (define (deposit amount)
        (set! balance (+ balance amount)) balance)
    (define (check guess-passwd)
        (eq? passwd guess-passwd))
    (lambda (input-passwd m)
        (cond ((not (eq? input-passwd passwd)) (error "Incorrect password -- MAKE-ACCOUNT"))
              ((eq? m 'withdraw) withdraw)
              ((eq? m 'deposit) deposit)
              ((eq? m 'check) check)
              (else (error "Unknown request -- MAKE-ACCOUNT" m)))))

(define (make-joint joint-account joint-password new-password)
    (if (equal? ((joint-account joint-password 'check) joint-password) #t)
        (lambda (input-passwd m)
            (cond ((not (eq? input-passwd new-password))
                   (error "Incorrect password -- MAKE-JOINT"))
                  ((eq? m 'withdraw)
                   (joint-account joint-password 'withdraw))
                  ((eq? m 'deposit)
                   (joint-account joint-password 'deposit))
                  ((eq? m 'check)
                   (joint-account joint-password 'check)) ; necessary?
                  (else (error "Unknown request -- MAKE-ACCOUNT" m))))
        (error "Incorrect password -- MAKE-JOINT")))

(define acc1 (make-account 100 'password1))
((acc1 'password1 'withdraw) 8)

(define acc2 (make-joint acc1 'password2 'password2))
(define acc2 (make-joint acc1 'password1 'password2))
((acc2 'password1 'withdraw) 8)
((acc2 'password2 'withdraw) 8)

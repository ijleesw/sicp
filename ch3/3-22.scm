(define (make-queue)
    (let ((front-ptr ())
          (rear-ptr ()))
        (define (empty?)
            (null? front-ptr))
        (define (set-front-ptr! ptr)
            (set! front-ptr ptr))
        (define (set-rear-ptr! ptr)
            (set! rear-ptr ptr))
        (define (front)
            (if (empty?)
                (error "FRONT called with an empty queue" front-ptr)
                (car front-ptr)))
        (define (insert! item)
            (let ((new-pair (cons item ())))
                (cond ((empty?)
                       (set-front-ptr! new-pair)
                       (set-rear-ptr! new-pair)
                       front-ptr)
                      (else
                       (set-cdr! rear-ptr new-pair)
                       (set-rear-ptr! new-pair)
                       front-ptr))))
        (define (pop)
            (if (empty?)
                (error "POP called with an empty queue" front-ptr)
                (begin (set-front-ptr! (cdr front-ptr))
                       front-ptr)))
        (define (dispatch m)
            (cond ((eq? m 'empty?) empty?)
                  ((eq? m 'front) front)
                  ((eq? m 'insert!) insert!)
                  ((eq? m 'pop) pop)
                  (else (error "undefined procedure -- MAKE-QUEUE" m))))
        dispatch))

(define q (make-queue))
((q 'empty?))
((q 'front))
((q 'insert!) 1)
((q 'insert!) 2)
((q 'insert!) 3)
((q 'empty?))
((q 'pop))
((q 'insert!) 4)
((q 'pop))
((q 'pop))
((q 'pop))
((q 'empty?))
((q 'pop))
